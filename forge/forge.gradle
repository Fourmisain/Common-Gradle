import net.minecraftforge.gradle.common.task.SignJar

def branch = project.findProperty("commonGradleBranch") ?: "master"
def useMixin = project.hasProperty("useMixin") && project.useMixin
def testMod = project.findProperty("testMod")
def shadowAutoConfig = !project.findProperty("shadowAutoConfig") || project.shadowAutoConfig
def author = project.findProperty("author") ?: "TheRandomLabs"

ext {
	gradle4 = true
	testing = false
	defaultCompileDependencies = false
	//For some reason, ForgeGradle doesn't like it when this is true.
	autoUpdateLicenses = false
	registerDefaultMavenPublication = false
}

apply from: "https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/$branch/build.gradle"

//Apparently, this block also has to be in the main build script.
buildscript {
	repositories {
		jcenter()

		mavenCentral()

		gradlePluginPortal()

		maven {
			url "http://files.minecraftforge.net/maven"
		}

		/* If useMixin:
		maven {
			url "https://dist.creeper.host/Sponge/maven"
		}
		*/
	}

	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle",
				version: "3.+", changing: true
		classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
		classpath "gradle.plugin.com.modrinth.minotaur:Minotaur:1.1.0"
		//If useMixin:
		//classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
	}
}

apply plugin: "eclipse"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "com.modrinth.minotaur"

if (useMixin) {
	apply plugin: "org.spongepowered.mixin"
}

configurations {
	shadow
}

repositories {
	maven {
		url "https://maven.tterrag.com/"
	}

	if (project.hasProperty("clothConfigVersion")) {
		maven {
			url "https://dl.bintray.com/shedaniel/cloth-config-2"
		}
	}

	if (project.hasProperty("autoConfigVersion")) {
		maven {
			url "https://dl.bintray.com/shedaniel/autoconfig1u"
		}
	}

	if (project.hasProperty("autoConfigTOMLVersion")) {
		maven {
			url "https://jitpack.io"
		}
	}
}

minecraft {
	mappings channel: mappingsChannel, version: mappingsVersion
	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

	runs {
		client {
			workingDirectory file("run")

			if (useMixin) {
				arg "-mixin.config=" + archivesBaseName + ".mixins.json"
			}

			property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
			property "forge.logging.console.level", "debug"

			mods {
				if (testMod) {
					testmod {
						source sourceSets.test
						source sourceSets.main
					}
				} else {
					create(project.name) {
						source sourceSets.main
					}
				}
			}
		}

		server {
			workingDirectory file("run")

			if (useMixin) {
				arg "-mixin.config=" + archivesBaseName + ".mixins.json"
			}

			property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
			property "forge.logging.console.level", "debug"

			mods {
				if (testMod) {
					testmod {
						source sourceSets.test
						source sourceSets.main
					}
				} else {
					create(project.name) {
						source sourceSets.main
					}
				}
			}
		}

		data {
			workingDirectory file("run")

			property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
			property "forge.logging.console.level", "debug"

			args "--mod", archivesBaseName, "--all", "--output", file("src/generated/resources/"),
					"--existing", file("src/main/resources/")

			mods {
				create(project.name) {
					source sourceSets.main
				}
			}
		}
	}
}

dependencies {
	minecraft("net.minecraftforge:forge:${project.minecraftVersion}-${project.forgeVersion}")

	if (project.hasProperty("clothConfigVersion")) {
		compile(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.clothConfigVersion}"))
	}

	if (project.hasProperty("autoConfigVersion")) {
		runtimeOnly(fg.deobf("me.shedaniel:autoconfig1u-forge:${project.autoConfigVersion}")) {
			transitive = false
		}

		compileOnly("me.shedaniel:autoconfig1u-forge:${project.autoConfigVersion}") {
			transitive = false
		}

		if (testMod) {
			testCompileOnly("me.shedaniel:autoconfig1u-forge:${project.autoConfigVersion}") {
				transitive = false
			}
		}

		if (shadowAutoConfig) {
			shadow("me.shedaniel:autoconfig1u-forge:${project.autoConfigVersion}") {
				transitive = false
			}
		}
	}

	if (project.hasProperty("autoConfigTOMLVersion")) {
		compile "com.github.TheRandomLabs:AutoConfig-TOML:${project.autoConfigTOMLVersion}"
		shadow "com.github.TheRandomLabs:AutoConfig-TOML:${project.autoConfigTOMLVersion}"
	}
}

if (useMixin) {
	mixin {
		add sourceSets.main, "${archivesBaseName}.refmap.json"
	}
}

if (project.hasProperty("autoConfigVersion") && shadowAutoConfig) {
	shadowJar {
		relocate(
				"me.shedaniel.autoconfig1u",
				"${project.group}.shadowed.me.shedaniel.autoconfig1u"
		)

		setConfigurations([project.configurations.getByName("shadow")])
		classifier(null)
	}
}

if (project.hasProperty("autoConfigTOMLVersion")) {
	shadowJar {
		relocate(
				"com.therandomlabs.autoconfigtoml",
				"${project.group}.shadowed.com.therandomlabs.autoconfigtoml"
		)

		setConfigurations([project.configurations.getByName("shadow")])
		classifier(null)
	}
}

reobf {
	shadowJar {}
}

task deobfJar(type: Jar, dependsOn: jar) {
	classifier "deobf"
	from sourceSets.main.output
}

artifacts {
	archives deobfJar
}

task signJar(type: SignJar, dependsOn: jar) {
	onlyIf {
		project.hasProperty("keyStore")
	}

	keyStore = project.findProperty("keyStore")
	alias = project.findProperty("keyStoreAlias")
	storePass = project.findProperty("keyStorePass")
	keyPass = project.findProperty("keyStoreKeyPass")
	inputFile = jar.archivePath
	outputFile = jar.archivePath
}

build.dependsOn signJar

jar {
	manifest {
		attributes([
				"Specification-Title": project.name,
				"Specification-Vendor": "$author",
				"Specification-Version": "1",
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				"Implementation-Vendor": "$author",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Fingerprint": project.findProperty("signSHA1") ?: ""
		])

		if (useMixin) {
			attributes([
					"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
					"MixinConfigs": "${archivesBaseName}.mixins.json",
					"FMLCorePluginContainsFMLMod": "true"
			])
		}
	}
}

jar.finalizedBy("reobfJar")

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(file(
					"${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar"
			)) {
				builtBy build
			}
			artifact deobfJar
			artifact sourcesJar
			artifact javadocJar
		}
	}
}
