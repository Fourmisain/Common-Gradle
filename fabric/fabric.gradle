def branch = project.findProperty("commonGradleBranch") ?: "master"
def includeClothConfig = !project.hasProperty("includeClothConfig") || project.includeClothConfig

ext {
	testing = false
	defaultCompileDependencies = false
	includeLicense = false
	buildSourcesJar = false
	registerDefaultMavenPublication = false
}

apply from: "https://raw.githubusercontent.com/TheRandomLabs/Common-Gradle/$branch/build.gradle"

repositories {
	if (project.hasProperty("clothConfigVersion")) {
		maven {
			url "https://dl.bintray.com/shedaniel/cloth-config-2"
		}
	}

	if (project.hasProperty("autoconfigVersion")) {
		maven {
			url "https://dl.bintray.com/shedaniel/autoconfig1u"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraftVersion}"
	mappings "net.fabricmc:yarn:${project.yarnMappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loaderVersion}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricAPIVersion}"

	if (project.hasProperty("clothConfigVersion")) {
		modImplementation("me.shedaniel.cloth:config-2:${project.clothConfigVersion}") {
			exclude(module: "fabric-api")
		}

		if (includeClothConfig) {
			include "me.shedaniel.cloth:config-2:${project.clothConfigVersion}"
		}
	}

	if (project.hasProperty("autoconfigVersion")) {
        modImplementation("me.sargunvohra.mcmods:autoconfig1u:${project.autoconfigVersion}") {
            exclude(module: "fabric-api")
        }

		if (includeClothConfig) {
			include "me.sargunvohra.mcmods:autoconfig1u:${project.autoconfigVersion}"
		}
	}

	if (project.hasProperty("autoconfigTOMLVersion")) {
		modImplementation "com.github.TheRandomLabs:AutoConfig-TOML:${project.autoconfigTOMLVersion}"
		include "com.github.TheRandomLabs.AutoConfig-TOML:${project.autoconfigTOMLVersion}"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename {
			"${it}_${project.archivesBaseName}"
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			artifact javadocJar
		}
	}
}
